{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This is my seventh CloudFormation template.",

    "Parameters" : {
        "KeyNameParameter": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
          },

          "InstanceTypeParameter" : {
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" : ["t2.micro", "t2.small", "t2.medium"],
            "Description" : "Enter t2.micro, t2.small, or t2.medium. Default is t2.micro."
          },

          "EnvironmentTypeParam" : {
            "Description" : "Environment type",
            "Default" : "Staging",
            "Type" : "String",
            "AllowedValues" : ["Production", "Staging"],
            "ConstraintDescription" : "Must specify Production or Staging environment."
          },

          "DBName" : {
            "Default": "wordpressdb",
            "Description" : "The WordPress database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
          },
      
          "DBUser" : {
            "NoEcho": "true",
            "Description" : "The WordPress database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
          },
      
          "DBPassword" : {
            "NoEcho": "true",
            "Description" : "The WordPress database admin account password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern" : "[a-zA-Z0-9]*",
            "ConstraintDescription" : "must contain only alphanumeric characters."
          },
      
          "DBRootPassword" : {
            "NoEcho": "true",
            "Description" : "MySQL root password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern" : "[a-zA-Z0-9]*",
            "ConstraintDescription" : "must contain only alphanumeric characters."
          }
      },   

      "Mappings" : {
        "AWSRegionEnv2AMI" : {
            "us-west-1" : { "Production" : "ami-824c4ee2", "Staging" : "ami-824c4ee2" },
            "us-west-2" : { "Production" : "ami-f2d3638a", "Staging" : "ami-f2d3638a" },
            "us-east-1" : { "Production" : "ami-97785bed", "Staging" : "ami-97785bed" },
            "us-east-2" : { "Production" : "ami-f63b1193", "Staging" : "ami-f63b1193" },

            "ca-central-1" : { "Production" : "ami-a954d1cd", "Staging" : "ami-a954d1cd" },

            "eu-west-1" : { "Production" : "ami-d834aba1", "Staging" : "ami-d834aba1" },
            "eu-west-2" : { "Production" : "ami-403e2524", "Staging" : "ami-403e2524" },
            "eu-east-3" : { "Production" : "ami-8ee056f3", "Staging" : "ami-8ee056f3" },
            "eu-central-1" : { "Production" : "ami-5652ce39", "Staging" : "ami-5652ce39" }
            
        }
      },

      "Conditions" : {
        "CreateProdResources" : {"Fn::Equals" : [{"Ref" : "EnvironmentTypeParam"}, "Production"]}
      },

    "Resources": {

        "MyFirstInstance": {
            "Type": "AWS::EC2::Instance",


            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                  "configSets" : {
                    "wordpress_install" : ["install_cfn", "install_wordpress", "configure_wordpress" ]
                  },

                  "install_cfn" : {
                    "files": {
                      "/etc/cfn/cfn-hup.conf": {
                        "content": { "Fn::Join": [ "", [
                          "[main]\n",
                          "stack=", { "Ref": "AWS::StackId" }, "\n",
                          "region=", { "Ref": "AWS::Region" }, "\n"
                        ]]},
                        "mode"  : "000400",
                        "owner" : "root",
                        "group" : "root"
                      },
                      "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                        "content": { "Fn::Join": [ "", [
                          "[cfn-auto-reloader-hook]\n",
                          "triggers=post.update\n",
                          "path=Resources.MyFirstInstance.Metadata.AWS::CloudFormation::Init\n",
                          "action=/opt/aws/bin/cfn-init -v ",
                                  "         --stack ", { "Ref" : "AWS::StackName" },
                                  "         --resource MyFirstInstance ",
                                  "         --configsets wordpress_install ",
                                  "         --region ", { "Ref" : "AWS::Region" }, "\n"
                        ]]},          
                        "mode"  : "000400",
                        "owner" : "root",
                        "group" : "root"
                      }
                    },
                    "services" : {
                      "sysvinit" : {
                        "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                      "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
                      }
                    }
                  },
        
                  "install_wordpress" : {
                    "packages" : {
                      "yum" : {
                        "php"          : [],
                        "php-mysql"    : [],
                        "mysql"        : [],
                        "mysql-server" : [],
                        "mysql-devel"  : [],
                        "mysql-libs"   : [],
                        "httpd"        : []
                      }
                    },
                    "sources" : {
                      "/var/www/html" : "http://wordpress.org/latest.tar.gz"
                    },
                    "files" : {
                      "/tmp/setup.mysql" : {
                        "content" : { "Fn::Join" : ["", [
                          "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
                          "CREATE USER '", { "Ref" : "DBUser" }, "'@'localhost' IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n",
                          "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUser" }, "'@'localhost';\n",
                          "FLUSH PRIVILEGES;\n"
                        ]]},
                        "mode"  : "000400",
                        "owner" : "root",
                        "group" : "root"
                      },
        
                      "/tmp/create-wp-config" : {
                        "content" : { "Fn::Join" : [ "", [
                          "#!/bin/bash -xe\n",
                          "cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php\n",
                          "sed -i \"s/'database_name_here'/'",{ "Ref" : "DBName" }, "'/g\" wp-config.php\n",
                          "sed -i \"s/'username_here'/'",{ "Ref" : "DBUser" }, "'/g\" wp-config.php\n",
                          "sed -i \"s/'password_here'/'",{ "Ref" : "DBPassword" }, "'/g\" wp-config.php\n"
                        ]]},
                        "mode" : "000500",
                        "owner" : "root",
                        "group" : "root"
                      }
                    },
                    "services" : {
                      "sysvinit" : {
                        "httpd"  : { "enabled" : "true", "ensureRunning" : "true" },
                        "mysqld" : { "enabled" : "true", "ensureRunning" : "true" }
                      }
                    }
                  },
        
                  "configure_wordpress" : {
                    "commands" : {
                      "01_set_mysql_root_password" : {
                        "command" : { "Fn::Join" : ["", ["mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "'"]]},
                        "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
                      },
                      "02_create_database" : {
                        "command" : { "Fn::Join" : ["", ["mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql"]]},
                        "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
                      },
                      "03_configure_wordpress" : {
                        "command" : "/tmp/create-wp-config",
                        "cwd" : "/var/www/html/wordpress"
                      }
                    }
                  }
                }
              },



            "Properties": {
                "KeyName": {"Ref" : "KeyNameParameter"},
                "ImageId": { "Fn::FindInMap" : [ "AWSRegionEnv2AMI", { "Ref" : "AWS::Region" }, {"Ref" : "EnvironmentTypeParam"} ] },

                "InstanceType": { "Ref" : "InstanceTypeParameter" },
                "SecurityGroups" : [ {"Ref" : "InstanceSecurityGroup"} ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "My Instance"
                    }
                ],

                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "yum update -y aws-cfn-bootstrap\n",

                    "/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource MyFirstInstance ",
                    "         --configsets wordpress_install ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",

                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource MyFirstInstance ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"

                ]]}}
            }
            },

            "MyProdInstance": {
                "Type": "AWS::EC2::Instance",
                "Condition" : "CreateProdResources",
                "Properties": {
                    "KeyName": {"Ref" : "KeyNameParameter"},
                    "ImageId": { "Fn::FindInMap" : [ "AWSRegionEnv2AMI", { "Ref" : "AWS::Region" }, {"Ref" : "EnvironmentTypeParam"} ] },
    
                    "InstanceType": { "Ref" : "InstanceTypeParameter" },
                    "SecurityGroups" : [ {"Ref" : "InstanceSecurityGroup"} ],
                    "Tags": [
                        {
                            "Key": "Name",
                            "Value": { "Ref" : "EnvironmentTypeParam"}
                        }
                    ]
                }
            },      

            "InstanceSecurityGroup" : {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                  "GroupDescription" : "Enable SSH access from a specific IP",
                  "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "10.0.0.5/32"},
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
                  ]
                }
            }
    },

    "Outputs" : {
        "InstanceIPAddress" : {
            "Description" : "Public IP of my Instance",
            "Value" : { "Fn::GetAtt" : [ "MyFirstInstance", "PublicIp" ]},
            "Export" : {
              "Name" : {"Fn::Sub": "${AWS::StackName}-InstancePublicIP" }
            }
          },
          "KeyName" : {
            "Description" : "EC2 KeyName",
            "Value" : { "Ref" : "KeyNameParameter"},
            "Export" : {
              "Name" : "MyService-KeyName" 
            }
          },
          "InstanceSize" : {
            "Description" : "Instance Size",
            "Value" : { "Ref" : "InstanceTypeParameter"},
            "Export" : {
              "Name" : "MyService-InstanceType"
            }
          },
          "AMI" : {
            "Description" : "Instance Size",
            "Value" :  { "Fn::FindInMap" : [ "AWSRegionEnv2AMI", { "Ref" : "AWS::Region" }, {"Ref" : "EnvironmentTypeParam"} ] },
            "Export" : {
              "Name" : "MyService-AMI"
            }
          }
    }

}